# Escenario A ‚Äì Replicaci√≥n Maestro-Esclavo con MySQL en Google Cloud

## üéØ Objetivo

Implementar una replicaci√≥n **activa/pasiva** (Maestro-Esclavo) en MySQL, sobre infraestructura provisionada en Google Cloud Platform (GCP), demostrando replicaci√≥n de datos en tiempo real entre dos instancias.

---

## üèóÔ∏è Infraestructura

| Rol      | VM                       | IP interna    | Sistema operativo |
|----------|--------------------------|---------------|--------------------|
| Maestro  | `centro-medico`          | 10.128.0.2    | Debian/Ubuntu      |
| Esclavo  | `centro-exclavo`         | 10.128.0.4    | Debian/Ubuntu      |

- MySQL Server 8.x instalado en ambas instancias
- Puerto TCP 3306 habilitado en firewall interno de VPC

---

## ‚öôÔ∏è Configuraci√≥n del Maestro

Archivo editado: `/etc/mysql/mysql.conf.d/mysqld.cnf`

```ini
[mysqld]
server-id = 1
log-bin = mysql-bin
binlog-do-db = CentroMedicoDB
bind-address = 0.0.0.0
![imagen](https://github.com/user-attachments/assets/e6a815c6-149b-4f87-a208-6ac57259f169)

Comandos ejecutados:
CREATE USER 'replicador'@'10.128.0.4' IDENTIFIED WITH mysql_native_password BY 'R3plica!2024';
GRANT REPLICATION SLAVE ON *.* TO 'replicador'@'10.128.0.4';
FLUSH PRIVILEGES;
FLUSH TABLES WITH READ LOCK;
SHOW MASTER STATUS;


Resultado esperado:
File: mysql-bin.000007
Position: 886
![imagen](https://github.com/user-attachments/assets/174d039c-5788-4be6-984e-60d2257b45ed)


‚öôÔ∏è Configuraci√≥n del Esclavo

Archivo editado: /etc/mysql/mysql.conf.d/mysqld.cnf
[mysqld]
server-id = 2
relay-log = relay-log
bind-address = 0.0.0.0
![imagen](https://github.com/user-attachments/assets/d258edcc-1c01-4466-96d5-a12dae425a35)

Comando de conexi√≥n:
CHANGE MASTER TO
  MASTER_HOST='10.128.0.2',
  MASTER_USER='replicador',
  MASTER_PASSWORD='R3plica!2024',
  MASTER_LOG_FILE='mysql-bin.000007',
  MASTER_LOG_POS=886;

START SLAVE;


Verificaci√≥n:
SHOW SLAVE STATUS\G

![imagen](https://github.com/user-attachments/assets/d02b144b-f255-49ba-bf3b-1942d68761cb)

Se espera ver:

    Slave_IO_Running: Yes

    Slave_SQL_Running: Yes

üß™ Prueba de replicaci√≥n

    Crear base de datos y tabla en ambos servidores:

CREATE DATABASE CentroMedicoDB;
USE CentroMedicoDB;

CREATE TABLE prueba_sync (
  id INT AUTO_INCREMENT PRIMARY KEY,
  mensaje VARCHAR(100)
);


Insertar en el maestro:
INSERT INTO prueba_sync (mensaje) VALUES ('¬°Hola desde el maestro!');


Verificar en el esclavo:
SELECT * FROM prueba_sync;

![imagen](https://github.com/user-attachments/assets/980af56b-b5a9-4b79-8b8d-1b974c4538c0)
‚úÖ Resultado: El registro se replica correctamente.
üìä Verificaci√≥n desde interfaz web

    Se actualiz√≥ appsettings.json para conectar al maestro en la nube

    La aplicaci√≥n web se levant√≥ con node server.js

    Se registr√≥ un nuevo m√©dico desde el frontend

    Se verific√≥ en ambos servidores que los datos fueron replicados correctamente

üîí Seguridad

    Se habilit√≥ acceso remoto solo desde IP p√∫blica espec√≠fica

    Reglas de firewall limitan TCP/3306 a rango interno de GCP

üìé Archivos incluidos

    mysqld.cnf (maestro y esclavo)

    Capturas de pantalla de consola GCP, Workbench y consola SSH

    Logs de SHOW SLAVE STATUS

üß† Observaciones

    La replicaci√≥n no crea autom√°ticamente bases/tables: deben existir previamente

    El esclavo debe ser solo lectura

    Ante errores como Error 1049, se puede usar:
STOP SLAVE;
SET GLOBAL sql_slave_skip_counter = 1;
START SLAVE;





